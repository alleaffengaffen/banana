argo-cd:
  global:
    networkPolicy:
      create: true

  configs:
    cm:
      exec.enabled: "true"
      admin.enabled: "true"
      server.rbac.log.enfore.enable: "true"
      url: "https://cd.tools.alleaffengaffen.ch"
      dex.config: |
        connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: 26be52c1bdb04a4d6e1f
              clientSecret: $github-oidc:clientSecret # references the sealed secret in the templates folder
              orgs:
              - name: alleaffengaffen

    rbac:
      policy.csv: |
        # Grant all members of 'alleaffengaffen:orangutans' admins
        g, alleaffengaffen:orangutans, role:admin
      policy.default: role:readonly

  server:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      ingressClassName: "nginx"
      hosts:
        - cd.tools.alleaffengaffen.ch
      tls:
        - secretName: argocd-secret
          hosts:
            - cd.tools.alleaffengaffen.ch
      https: true # TLS termination should happen on argocd-server because of grpc

  extraObjects:
    - apiVersion: argoproj.io/v1alpha1
      kind: AppProject
      metadata:
        name: addons
        namespace: argocd
      spec:
        clusterResourceWhitelist:
          - group: "*"
            kind: "*"
        description: Cluster infrastructure addons
        destinations:
          - name: in-cluster
            namespace: "*"
            server: https://kubernetes.default.svc
        namespaceResourceWhitelist:
          - group: "*"
            kind: "*"
        sourceRepos:
          - "*"
    - apiVersion: argoproj.io/v1alpha1
      kind: AppProject
      metadata:
        name: apps
        namespace: argocd
      spec:
        clusterResourceWhitelist:
          - group: "*"
            kind: "*"
        description: Applications
        destinations:
          - name: in-cluster
            namespace: "*"
            server: https://kubernetes.default.svc
        namespaceResourceWhitelist:
          - group: "*"
            kind: "*"
        sourceRepos:
          - https://github.com/alleaffengaffen/banana.git
    - apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: app-of-apps
        namespace: argocd
      spec:
        project: addons
        source:
          repoURL: https://github.com/alleaffengaffen/banana.git
          targetRevision: HEAD
          path: apps
        destination:
          server: https://kubernetes.default.svc
          namespace: argocd
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
            allowEmpty: false
          syncOptions:
            - CreateNamespace=true
            - ServerSideApply=true
          retry:
            limit: 5
            backoff:
              duration: 5s
              factor: 2
              maxDuration: 5m
    - apiVersion: cilium.io/v2
      kind: CiliumNetworkPolicy
      metadata:
        name: "allow-argocd-egress"
        namespace: argocd
      spec:
        endpointSelector:
          matchLabels:
            app.kubernetes.io/component: repo-server
            app.kubernetes.io/part-of: argocd
        egress:
          - toEntities:
              - "all"
    - apiVersion: cilium.io/v2
      kind: CiliumClusterwideNetworkPolicy
      metadata:
        name: "allow-egress-to-coredns"
      spec:
        endpointSelector: {}
        egress:
          - toEndpoints:
              - matchLabels:
                  "k8s:io.kubernetes.pod.namespace": kube-system
                  "k8s:k8s-app": kube-dns
            toPorts:
              - ports:
                  - port: "53"
                    protocol: ANY
                rules:
                  dns:
                    - matchPattern: "*"
    - apiVersion: cilium.io/v2
      kind: CiliumClusterwideNetworkPolicy
      metadata:
        name: "allow-egress-to-cluster"
      spec:
        endpointSelector: {}
        egress:
          - toEntities:
              - "cluster"
    - apiVersion: "cilium.io/v2"
      kind: CiliumClusterwideNetworkPolicy
      metadata:
        name: "cilium-health-checks"
      spec:
        endpointSelector:
          matchLabels:
            "reserved:health": ""
        ingress:
          - fromEntities:
              - remote-node
        egress:
          - toEntities:
              - remote-node
    - apiVersion: cilium.io/v2
      kind: CiliumNetworkPolicy
      metadata:
        name: trusted-kube-system
        namespace: kube-system
      spec:
        endpointSelector: {}
        ingress:
          - fromEntities:
              - all
        egress:
          - toEntities:
              - all
